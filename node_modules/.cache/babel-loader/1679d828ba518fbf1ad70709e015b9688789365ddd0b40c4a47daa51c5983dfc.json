{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BHARGAVI\\\\OneDrive\\\\Desktop\\\\New\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const login = async (email, password) => {\n    try {\n      // Your login logic here\n      setUser({\n        email\n      }); // Set user data\n      localStorage.setItem('user', JSON.stringify({\n        email\n      }));\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const updateProfile = async updatedData => {\n    try {\n      // Here you would typically make an API call to update the user data\n      const updatedUser = {\n        ...user,\n        ...updatedData\n      };\n\n      // Update local storage and state\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      return true;\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n      throw error;\n    }\n  };\n  useEffect(() => {\n    // Check for stored user data when the app loads\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    updateProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","loading","setLoading","login","email","password","localStorage","setItem","JSON","stringify","error","logout","removeItem","updateProfile","updatedData","updatedUser","console","storedUser","getItem","parse","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/BHARGAVI/OneDrive/Desktop/New/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const login = async (email, password) => {\n    try {\n      // Your login logic here\n      setUser({ email }); // Set user data\n      localStorage.setItem('user', JSON.stringify({ email }));\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const updateProfile = async (updatedData) => {\n    try {\n      // Here you would typically make an API call to update the user data\n      const updatedUser = {\n        ...user,\n        ...updatedData,\n      };\n      \n      // Update local storage and state\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      setUser(updatedUser);\n      return true;\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n      throw error;\n    }\n  };\n\n  useEffect(() => {\n    // Check for stored user data when the app loads\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false);\n  }, []);\n\n  const value = {\n    user,\n    login,\n    logout,\n    loading,\n    updateProfile\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n} "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,OAAON,UAAU,CAACI,WAAW,CAAC;AAChC;AAACE,EAAA,CAFeD,OAAO;AAIvB,OAAO,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EACzC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMe,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACAL,OAAO,CAAC;QAAEI;MAAM,CAAC,CAAC,CAAC,CAAC;MACpBE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL;MAAM,CAAC,CAAC,CAAC;IACzD,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBX,OAAO,CAAC,IAAI,CAAC;IACbM,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOC,WAAW,IAAK;IAC3C,IAAI;MACF;MACA,MAAMC,WAAW,GAAG;QAClB,GAAGhB,IAAI;QACP,GAAGe;MACL,CAAC;;MAED;MACAR,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACM,WAAW,CAAC,CAAC;MACzDf,OAAO,CAACe,WAAW,CAAC;MACpB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACd;IACA,MAAM2B,UAAU,GAAGX,YAAY,CAACY,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAID,UAAU,EAAE;MACdjB,OAAO,CAACQ,IAAI,CAACW,KAAK,CAACF,UAAU,CAAC,CAAC;IACjC;IACAf,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,KAAK,GAAG;IACZrB,IAAI;IACJI,KAAK;IACLQ,MAAM;IACNV,OAAO;IACPY;EACF,CAAC;EAED,oBACErB,OAAA,CAACC,WAAW,CAAC4B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAvB,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B;AAAC3B,GAAA,CA3DeF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}